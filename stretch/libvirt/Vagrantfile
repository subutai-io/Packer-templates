# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'fileutils'

unless Vagrant.has_plugin?('vagrant-subutai')
  raise "\e[33m\n\nVagrant Subutai Plugin is required. Please install plugin by following command:\n\nvagrant plugin install vagrant-subutai\n\e[0m"
end

unless Vagrant.has_plugin?('vagrant-libvirt')
  raise "\e[33m\n\nVagrant Libvirt Plugin is required. Please install plugin by following command:\n\nvagrant plugin install vagrant-libvirt\n\e[0m"
end

if Gem::Version.new(VagrantSubutai::VERSION) < Gem::Version.new('7.0.2')
  raise "\e[33m\n\nVagrant Subutai Plugin version (#{VagrantSubutai::VERSION}) is incompatible with your box. Please update plugin by following command:\n\nvagrant plugin update vagrant-subutai\n\e[0m"
end

require 'vagrant-subutai'

SubutaiConfig.bridged!
#SubutaiConfig.logging!(:debug)

SubutaiConfig.load_config(ARGV[0], :libvirt)
SubutaiConfig.print

Vagrant.require_version '>= 2.0.1'

Vagrant.configure('2') do |config|

  config.vm.box = 'subutai/stretch'
  url = SubutaiConfig.url_of_cdn
  owner = 'subutai'
  artifact_name = 'vagrant-subutai-stretch-libvirt.box'
  config.vm.box_url = url + '/raw/download?id=' + SubutaiConfig.get_latest_id_artifact(owner, artifact_name)
  config.ssh.username = 'subutai'

  # check LIBVIRT_USER and LIBVIRT_HOST
  if !SubutaiConfig.get(:LIBVIRT_HOST).nil? && !SubutaiConfig.get(:LIBVIRT_USER).nil?
    STDOUT.puts "\e\nStarted libvirt operation in remote machine\n. USER: #{SubutaiConfig.get(:LIBVIRT_USER)}, HOST: #{SubutaiConfig.get(:LIBVIRT_HOST).strip}\e[0m"
    proxy_timeout = 500000

    config.ssh.insert_key = false
    config.ssh.forward_agent = true
    config.ssh.proxy_command = "ssh -p #{SubutaiConfig.get(:LIBVIRT_PORT)} #{SubutaiConfig.get(:LIBVIRT_USER).strip}@#{SubutaiConfig.get(:LIBVIRT_HOST).strip} netcat -w #{proxy_timeout} %h %p"
  end

  config.vm.base_mac = SubutaiConfig.get(:_BASE_MAC)

  # Second Bridged Interface enp???
  unless SubutaiConfig.get(:BRIDGE).nil? || SubutaiConfig.boolean?(:LIBVIRT_NO_BRIDGE)
    if SubutaiConfig.get(:LIBVIRT_MACVTAP)
      config.vm.network "public_network", type: "direct",
                        dev: SubutaiConfig.get(:BRIDGE),
                        mode: "bridge",
                        network_name: "public-network"
    else
      config.vm.network "public_network", type: "bridge",
                        dev: SubutaiConfig.get(:BRIDGE),
                        mode: "bridge",
                        network_name: "public-network"
    end
  end

  if SubutaiConfig.boolean?(:SUBUTAI_PEER)
    config.vm.network 'forwarded_port', guest: 8443, host: SubutaiConfig.get(:_CONSOLE_PORT)
  end

  config.vm.synced_folder ".", "/vagrant", disabled: false

  config.vm.provider 'libvirt' do |libvirt|
    libvirt.driver = 'kvm'
    libvirt.username = 'subutai'
    libvirt.storage_pool_name = 'default'

    libvirt.memory = SubutaiConfig.get(:SUBUTAI_RAM)
    libvirt.cpus = SubutaiConfig.get(:SUBUTAI_CPU)

    if SubutaiConfig.write? || SubutaiConfig.reload?
      has_grow, grow_by = SubutaiDisk.has_grow

      if has_grow
        size = SubutaiDisk.libvirt_size(grow_by)

        STDOUT.puts  "\e[33mDisk size is growing by #{grow_by} gb.\e[0m"

        libvirt.storage :file, :size => size, :cache => "none"

        SubutaiDisk.save_conf(grow_by)
      end
    end

    # check LIBVIRT_USER and LIBVIRT_HOST
    if !SubutaiConfig.get(:LIBVIRT_HOST).nil? && !SubutaiConfig.get(:LIBVIRT_USER).nil?
      libvirt.uri = "qemu+ssh://#{SubutaiConfig.get(:LIBVIRT_USER).strip}@#{SubutaiConfig.get(:LIBVIRT_HOST).strip}:#{SubutaiConfig.get(:LIBVIRT_PORT)}/system"
      libvirt.connect_via_ssh
    end
  end

  if SubutaiConfig.write? || SubutaiConfig.reload?
    has_grow, grow_by = SubutaiDisk.has_grow

    if has_grow
      config.vm.provision "shell", run: "always", env: {DISK_SIZE: grow_by.to_i},
                          path: 'https://gist.githubusercontent.com/jadilet/cfa6b9201afe01d0631570f66c1f0abc/raw/ce591c5b43dea9461266d3c68c40b0e4687ac0d8/subutai_disk.sh'
    end
  end

  config.vm.provision 'shell', env: SubutaiConfig.config, inline: <<-SHELL
    echo "SUBUTAI_VAGRANT_VERSION=$VERSION"   >> /etc/environment
    echo "SUBUTAI_BRIDGE_IFACE=eth1"        >> /etc/environment
    echo "SUBUTAI_NAT_IFACE=eth0"           >> /etc/environment

    if [ -n "$PASSWORD_OVERRIDE" ]; then
      usermod --password $(echo "$PASSWORD_OVERRIDE" | openssl passwd -1 -stdin) subutai
    fi
  SHELL

  unless SubutaiConfig.get(:AUTHORIZED_KEYS).nil?
    config.vm.provision 'file', source: SubutaiConfig.get(:AUTHORIZED_KEYS), destination: '/tmp/authorized_keys'

    config.vm.provision 'shell', inline: <<-SHELL
      mkdir -p /root/.ssh
      cat /tmp/authorized_keys >> /root/.ssh/authorized_keys
      chmod 600 /root/.ssh/authorized_keys
      chmod 700 /root/.ssh

      mkdir -p /home/subutai/.ssh
      cat /tmp/authorized_keys >> /home/subutai/.ssh/authorized_keys
      chown subutai:subutai /home/subutai/.ssh/authorized_keys
      chmod 600 /home/subutai/.ssh/authorized_keys
      chmod 700 /home/subutai/.ssh
      chown subutai:subutai /home/subutai/.ssh
    SHELL
  end


  if SubutaiConfig.provision_management?
    config.vm.provision 'file', source: SubutaiConfig.get(:_ALT_MANAGEMENT), destination: '$HOME/subutai.management'
    SubutaiConfig.management_provisioned!
  end

  config.vm.provision 'shell', env: SubutaiConfig.config,
                      path: 'https://raw.githubusercontent.com/subutai-io/packer/master/provisioning/en/provisioner.sh'

  if SubutaiConfig.boolean?(:PROVISION)
    config.vm.provision :registration
    config.vm.provision :blueprint
  end
end