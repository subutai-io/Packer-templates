# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'fileutils'

unless Vagrant.has_plugin?('vagrant-subutai')
  raise "\e[33m\n\nVagrant Subutai Plugin is required. Please install plugin by following command:\n\nvagrant plugin install vagrant-subutai\n\e[0m"
end

unless Vagrant.has_plugin?('vagrant-vmware-desktop')
  raise "\e[33m\n\nVagrant VMware Desktop Plugin is required. Please install plugin by following command:\n\nvagrant plugin install vagrant-vmware-desktop\n\e[0m"
end

if Gem::Version.new(VagrantSubutai::VERSION) < Gem::Version.new('7.0.4')
  raise "\e[33m\n\nVagrant Subutai Plugin version (#{VagrantSubutai::VERSION}) is incompatible with your box. Please update plugin by following command:\n\nvagrant plugin update vagrant-subutai\n\e[0m"
end

require 'vagrant-subutai'

SubutaiConfig.bridged!
#SubutaiConfig.logging!(:debug)

SubutaiConfig.load_config(ARGV[0], :vmware)
SubutaiConfig.print

Vagrant.require_version '>= 2.0.1'

Vagrant.configure('2') do |config|

  config.vm.box = 'subutai/stretch'
  url = SubutaiConfig.url_of_cdn
  owner = 'subutai'
  artifact_name = 'vagrant-subutai-stretch-vmware.box'
  config.vm.box_url = url + '/raw/download?id=' + SubutaiConfig.get_latest_id_artifact(owner, artifact_name)
  config.ssh.username = 'subutai'

  config.vm.base_mac = SubutaiConfig.get(:_BASE_MAC)

  if SubutaiConfig.boolean?(:SUBUTAI_PEER)
    config.vm.network 'forwarded_port', guest: 8443, host: SubutaiConfig.get(:_CONSOLE_PORT), auto_correct: true
  end

  config.vm.synced_folder ".", "/vagrant", :disabled => false


  config.vm.provider "vmware_desktop" do |v|
    v.whitelist_verified = true

    v.linked_clone = false
    v.vmx["memsize"] = SubutaiConfig.get(:SUBUTAI_RAM)
    v.vmx["numvcpus"] = SubutaiConfig.get(:SUBUTAI_CPU)
    v.vmx["ethernet0.pcislotnumber"] = "33"

    # Bridge interface
    v.vmx["ethernet1.addresstype"] = "generated"
    v.vmx["ethernet1.generatedaddressoffset"] = "10"
    v.vmx["ethernet1.linkstatepropagation.enable"] = "TRUE"
    v.vmx["ethernet1.pcislotnumber"] = "32"
    v.vmx["ethernet1.present"] = "TRUE"

    if SubutaiConfig.write? || SubutaiConfig.reload?
      has_grow, grow_by = SubutaiDisk.has_grow
      file_disk = SubutaiDisk.file_path(grow_by, "vmware")
      port = SubutaiDisk.port

      unless File.exist? (file_disk)
        if has_grow
          if SubutaiDisk.vmware_create_disk(grow_by, file_disk)
            STDOUT.puts  "\e[33m#{SubutaiDisk.message(grow_by)}\e[0m"

            v.vmx["scsi0:#{port}.filename"] = file_disk
            v.vmx["scsi0:#{port}.present"] = "TRUE"
            v.vmx["scsi0:#{port}.redo"] = ""
            SubutaiDisk.save_path(port,
                                  file_disk)
            SubutaiDisk.save_conf(grow_by)
          else
            Put.error "Failed create disk: #{file_disk}"
          end
        end
      end
    end
  end

  if SubutaiConfig.write? || SubutaiConfig.reload?
    has_grow, grow_by = SubutaiDisk.has_grow

    if has_grow
      config.vm.provision "shell", run: "always", env: {DISK_SIZE: grow_by.to_i},
                          path: 'https://raw.githubusercontent.com/subutai-io/packer/master/provisioning/en/subutai_disk.sh'
    end
  end

  config.vm.provision 'shell', env: SubutaiConfig.config, inline: <<-SHELL
    echo "SUBUTAI_VAGRANT_VERSION=$VERSION"   >> /etc/environment
    echo "SUBUTAI_BRIDGE_IFACE=eth1"        >> /etc/environment
    echo "SUBUTAI_NAT_IFACE=eth0"           >> /etc/environment
    #echo "SUBUTAI_HOST_IFACE=eth2"          >> /etc/environment

    if [ -n "$PASSWORD_OVERRIDE" ]; then
      usermod --password $(echo "$PASSWORD_OVERRIDE" | openssl passwd -1 -stdin) subutai
    fi
  SHELL

  unless SubutaiConfig.get(:AUTHORIZED_KEYS).nil?
    config.vm.provision 'file', source: SubutaiConfig.get(:AUTHORIZED_KEYS), destination: '/tmp/authorized_keys'

    config.vm.provision 'shell', inline: <<-SHELL
      mkdir -p /root/.ssh
      cat /tmp/authorized_keys >> /root/.ssh/authorized_keys
      chmod 600 /root/.ssh/authorized_keys
      chmod 700 /root/.ssh

      mkdir -p /home/subutai/.ssh
      cat /tmp/authorized_keys >> /home/subutai/.ssh/authorized_keys
      chown subutai:subutai /home/subutai/.ssh/authorized_keys
      chmod 600 /home/subutai/.ssh/authorized_keys
      chmod 700 /home/subutai/.ssh
      chown subutai:subutai /home/subutai/.ssh
    SHELL
  end

  if SubutaiConfig.provision_management?
    config.vm.provision 'file', source: SubutaiConfig.get(:_ALT_MANAGEMENT), destination: '$HOME/subutai.management'
    SubutaiConfig.management_provisioned!
  end

  config.vm.provision 'shell', env: SubutaiConfig.config,
                      path: 'https://raw.githubusercontent.com/subutai-io/packer/master/provisioning/en/provisioner.sh'

  if SubutaiConfig.boolean?(:PROVISION)
    config.vm.provision :registration
    config.vm.provision :blueprint
  end

  if SubutaiConfig.boolean?(:SUBUTAI_DESKTOP)
    config.vm.provision 'shell', env: SubutaiConfig.config,
                        path: 'https://raw.githubusercontent.com/subutai-io/packer/enable-desktop/provisioning/en/subutai_desktop.sh'
  end

  config.vm.provision :cleanup
end